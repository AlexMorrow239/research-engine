// Flexbox mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Media queries
@mixin respond-to($breakpoint) {
  // Convert CSS variable to regular value
  @if $breakpoint == '--breakpoint-xs' {
    @media (max-width: 480px) { @content; }
  } @else if $breakpoint == '--breakpoint-sm' {
    @media (max-width: 576px) { @content; }
  } @else if $breakpoint == '--breakpoint-md' {
    @media (max-width: 768px) { @content; }
  } @else if $breakpoint == '--breakpoint-lg' {
    @media (max-width: 992px) { @content; }
  } @else if $breakpoint == '--breakpoint-xl' {
    @media (max-width: 1200px) { @content; }
  } @else if $breakpoint == '--breakpoint-xxl' {
    @media (max-width: 1400px) { @content; }
  }
}

// Typography mixins
@mixin font-style($weight: 'regular', $style: normal) {
  font-family: var(--font-primary);
  font-weight: var(--font-weight-#{$weight});
  font-style: $style;
}

@mixin heading($size: 'base') {
  font-family: var(--font-secondary);
  font-size: var(--font-size-#{$size});
  line-height: var(--line-height-tight);
  font-weight: var(--font-weight-bold);
}

// Button mixins
@mixin button-base {
  padding: var(--button-padding-base);
  border-radius: var(--border-radius-sm);
  cursor: pointer;
  font-size: var(--button-font-size);
  transition: var(--transition-base);
  @include font-style('medium');
}

@mixin button-variant($bg-color, $text-color, $hover-darken: 5%) {
  background-color: var(#{$bg-color});
  color: var(#{$text-color});
  
  &:hover {
    background-color: darken(var(#{$bg-color}), $hover-darken);
  }
}

// Card and container mixins
@mixin card-base {
  background-color: var(--color-background);
  border-radius: var(--border-radius-lg);
  box-shadow: 0 2px 4px var(--shadow-sm);
  padding: var(--spacing-md);
}

@mixin container($max-width: '--content-width') {
  width: 100%;
  max-width: var(#{$max-width});
  margin: 0 auto;
  padding: 0 var(--spacing-md);
}

// Input mixins
@mixin input-base {
  height: var(--input-height);
  padding: var(--input-padding);
  border: 1px solid var(--color-border-input);
  border-radius: var(--border-radius-sm);
  background-color: var(--color-background-input);
  font-size: var(--font-size-base);
  transition: var(--transition-fast);

  &:focus {
    border-color: var(--color-primary);
    outline: none;
    box-shadow: 0 0 0 2px var(--color-primary-transparent);
  }
}

// Position mixins
@mixin position-absolute($top: null, $right: null, $bottom: null, $left: null) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Grid mixins
@mixin grid($columns: 1, $gap: 'md') {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: var(--spacing-#{$gap});
}

// Animation mixins
@mixin fade-in($duration: 0.3s) {
  animation: fadeIn $duration ease-in;
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
}

// Shadow mixins
@mixin shadow($size: 'sm') {
  box-shadow: 0 2px 4px var(--shadow-#{$size});
}

// Text truncation
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}